{"version":3,"sources":["components/Section/Section.js","commons/firstUpp.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","firstUppercase","str","toUpperCase","slice","FeedbackOptions","options","onLeaveFeedback","arrButtons","Object","keys","map","button","className","css","type","onClick","Statistics","state","total","positivePercentage","arrItems","ul","item","Notification","message","App","good","neutral","bad","incrementState","setState","prevState","countTotalFeedback","values","reduce","sum","current","countPositiveFeedbackPercentage","Math","floor","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAgBeA,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OACI,qCACI,6BAAKD,IACJC,M,gBCJEC,EAFQ,SAAAC,GAAG,OAAKA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,ICqBjDC,MAjBf,YAAsD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBACzBC,EAAaC,OAAOC,KAAKJ,GAE/B,OACI,mCACKE,EAAWG,KAAI,SAAAC,GAAM,OAClB,wBAAQC,UAAWC,IAAIF,OAAQG,KAAK,SAAsBC,QAAS,kBAAMT,EAAgBK,IAAzF,SAAmGX,EAAeW,IAAhEA,S,gBCoBnDK,MA1Bf,YAII,IAHAC,EAGD,EAHCA,MACAC,EAED,EAFCA,MACAC,EACD,EADCA,mBAEMC,EAAWZ,OAAOC,KAAKQ,GAE7B,OACI,mCACI,qBAAIL,UAAWC,IAAIQ,GAAnB,UACKD,EAASV,KAAI,SAAAY,GAAI,OACd,+BAAgBtB,EAAesB,GAA/B,KAAwCL,EAAMK,KAArCA,MAEb,yCAAYJ,OACZ,qDAAwBC,IAAxB,aCJDI,MAZf,YAAoC,IAAZC,EAAW,EAAXA,QACpB,OACI,mCACI,6BAAKA,OCyDFC,E,4MA/CbR,MAAQ,CACNS,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,eAAiB,SAAAlB,GACX,EAAKmB,UAAS,SAAAC,GAAS,sBAChBpB,EAASoB,EAAUpB,GAAU,O,EAI1CqB,mBAAqB,WAGf,OAFuBxB,OAAOyB,OAAO,EAAKhB,OAEpBiB,QAAO,SAACC,EAAKC,GAAN,OAAmBD,EAAMC,M,EAG5DC,gCAAkC,kBAC5BC,KAAKC,MAAM,IAAM,EAAKtB,MAAMS,KAAO,EAAKM,uB,4CAG9C,WAEE,OACE,qCACE,cAAC,EAAD,CAASlC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBO,QAASmC,KAAKvB,MAAOX,gBAAiBkC,KAAKX,mBAG9D,cAAC,EAAD,CAAS/B,MAAM,aAAf,SACiC,IAA9B0C,KAAKR,qBACJ,cAAC,EAAD,CAAcR,QAAQ,sBAEtB,cAAC,EAAD,CACEP,MAAOuB,KAAKvB,MACZC,MAAOsB,KAAKR,mBACZb,mBAAoBqB,KAAKH,2C,GAtCrBI,aCRlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.efc90805.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    )\r\n }\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Section;","const firstUppercase = str => (str[0].toUpperCase() + str.slice(1));\r\n\r\nexport default firstUppercase;","import PropTypes from 'prop-types';\r\nimport css from './FeedbackOptions.module.css';\r\nimport firstUppercase from '../../commons/firstUpp';\r\n\r\nfunction FeedbackOptions({options, onLeaveFeedback}) {\r\n    const arrButtons = Object.keys(options);\r\n    \r\n    return (\r\n        <>\r\n            {arrButtons.map(button => (\r\n                <button className={css.button} type=\"button\" key={button} onClick={() => onLeaveFeedback(button)}>{firstUppercase(button)}</button>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n \r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\nimport css from './Statistics.module.css';\r\nimport firstUppercase from '../../commons/firstUpp';\r\n\r\nfunction Statistics({\r\n    state,\r\n    total,\r\n    positivePercentage\r\n}) {\r\n    const arrItems = Object.keys(state);\r\n\r\n    return (\r\n        <>\r\n            <ul className={css.ul}>\r\n                {arrItems.map(item => (\r\n                    <li key={item}>{firstUppercase(item)}: {state[item]}</li>\r\n                ))}\r\n                <li>Total: {total()}</li>\r\n                <li>Positive feedback: {positivePercentage()}%</li>\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    state: PropTypes.objectOf(PropTypes.number.isRequired).isRequired,\r\n    total: PropTypes.func.isRequired,\r\n    positivePercentage: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\n\r\nfunction Notification({ message }) {\r\n    return (\r\n        <>\r\n            <h3>{message}</h3>\r\n        </>\r\n    )\r\n }\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Notification;","//import logo from './logo.svg';\n//import Feedback from './components/Feedback';\n\nimport './App.css';\n\nimport { Component } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  \n  incrementState = button => {\n        this.setState(prevState => (\n            { [button]: prevState[button] + 1 }\n        ))\n  };\n  \n  countTotalFeedback = () => {\n        const arrNumFeedback = Object.values(this.state);\n\n        return arrNumFeedback.reduce((sum, current) => (sum + current));\n  };\n  \n  countPositiveFeedbackPercentage = () => (\n        Math.floor(100 * this.state.good / this.countTotalFeedback())\n  );\n\n  render() {\n    \n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.incrementState} />\n        </Section>\n        \n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              state={this.state}\n              total={this.countTotalFeedback}\n              positivePercentage={this.countPositiveFeedbackPercentage}\n            />\n          )}\n          \n        </Section>\n      </>\n    );\n  };\n}\n  \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}